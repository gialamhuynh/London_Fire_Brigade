from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import fbeta_score
from xgboost import XGBClassifier
from sklearn.metrics import confusion_matrix, classification_report
import joblib
import pandas as pd 
import os
from datetime import datetime


# loading of the model to test
#lfb_model = joblib.load('./../models/XGBoost3kurz_TO_TEST.pkl')

def evaluate_accuracy(y_test, y_pred):
    accuracy = accuracy_score(y_test, y_pred)
    if accuracy >= 0.60 : 
        return "SUCCESS"
    else : 
        return "FAILURE"

def evaluate_f2_score(y_test, y_pred):
    f2_score = fbeta_score(y_test, y_pred, beta=2, average='micro')
    if f2_score >= 0.60 : 
        return "SUCCESS"
    else : 
        return "FAILURE"



def manage_model(y_test, y_pred) : 

    accuracy_eval = evaluate_accuracy(y_test, y_pred)
    accuracy = accuracy_score(y_test, y_pred)
    f2_score_eval = evaluate_f2_score(y_test, y_pred)
    f2_score = fbeta_score(y_test, y_pred, beta=2, average='micro')

    current_model = './models/XGBoost3kurz_CURRENT.pkl'
    temp_model = './models/XGBoost3kurz_TEMP_COPY.pkl'
    test_model = './models/XGBoost3kurz_TO_TEST.pkl'
    test_status = ""

    #rename current model with suffix _TEMP_COPY
    os.rename(current_model,temp_model)

    #test of the accuracy and the f2 score. Both must be above 0.60. 
    if (accuracy_eval == "SUCCESS") & (f2_score_eval == "SUCCESS"):
        test_status = "SUCCESS"
        #rename the test model with suffix _CURRENT
        os.rename(test_model,current_model)
        #Delete the model with suffix _TEMP_COPY (old model)
        os.remove('./models/XGBoost3kurz_TEMP_COPY.pkl')
    else : 
        test_status = "FAILURE"
        #rename model with suffix TEMP_COPY with suffix _CURRENT
        os.rename(current_model,temp_model)
    
    time = datetime.now()

    output = '''
    ============================
    Model evaluation
    ============================
    {time}
    Model to test : XGBoost3kurz_TO_TEST
    that was generated by the last training
    Evaluated metrics : accuracy and F2-score

    expected results : 
    accuracy > 0.60
    f2-score > 0.60

    actual results : 
    accuracy : {accuracy}
    f2-score : {f2_score}
    ==>  {test_status}
    '''

    print(output.format(time=time,accuracy=accuracy, f2_score=f2_score, test_status=test_status))
    # printing in a file
    print ("LOG = ",os.environ.get('LOG'))

    try : 

        if os.environ.get('LOG') == '1':
            #log_folder = 'tests'  # Name of the folder
            #log_file_path = os.path.join(log_folder, 'model_test.log')  # Construct the full path ./tests/model_test.log

        #    with open(log_file_path, 'a') as file:
            with open('./tests/model_test_log.txt', 'a') as file:
                file.write(output.format(time=time,accuracy=accuracy, f2_score=f2_score,test_status=test_status))
                print("writing in file ./tests/model_test_log.txt")
    
    except :
        print("An exception has been raised. Read well.")
        
    #if os.environ.get('LOG') == 1:
    #    with open('./tests/train_model_test.log', 'a') as file:
    #        file.write(output)
    #evaluate_model(X_test, y_test, model)
